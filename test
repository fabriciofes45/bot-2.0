from unittest.mock import Mock
import tweepy

class MockTweepyAPI:
    def user_timeline(self, screen_name, count, tweet_mode):
        # Aqui você pode criar um mock para os resultados da chamada à API do Twitter
        mock_tweet1 = Mock()
        mock_tweet1.full_text = "Exemplo de tweet 1"
        mock_tweet1.id = "123456789"

        mock_tweet2 = Mock()
        mock_tweet2.full_text = "Exemplo de tweet 2"
        mock_tweet2.id = "987654321"

        return [mock_tweet1, mock_tweet2]

# Configurações do Twitter (não é mais necessário, pois estamos usando mock)
# TWITTER_API_KEY = "SUA_API_KEY_AQUI"
# TWITTER_API_SECRET = "SEU_API_SECRET_AQUI"
# TWITTER_ACCESS_TOKEN = "SEU_ACCESS_TOKEN_AQUI"
# TWITTER_ACCESS_SECRET = "SEU_ACCESS_SECRET_AQUI"
TWITTER_ACCOUNT = "conta_do_twitter"

# Configuração do Discord (mantida para o exemplo)
DISCORD_TOKEN = "LQ0PHJx5ptXV0ddpli3U03yZCHfpvPfr"
DISCORD_CHANNEL_NAME = "geral"

# Inicialização do mock da API do Twitter
mock_twitter_api = MockTweepyAPI()

# Exemplo de função para buscar tweets (agora usando o mock)
def fetch_tweets():
    tweets = mock_twitter_api.user_timeline(screen_name=TWITTER_ACCOUNT, count=5, tweet_mode="extended")
    for tweet in tweets:
        tweet_text = tweet.full_text
        tweet_url = f"https://twitter.com/{TWITTER_ACCOUNT}/status/{tweet.id}"
        print(f"Novo tweet: {tweet_text}\nLink: {tweet_url}")

# Chamando a função para buscar e imprimir os tweets (substitua por sua lógica de envio para o Discord)
fetch_tweets()
